// Generated by gencpp from file ur_robot_gazebo/PoseMessageSimple.msg
// DO NOT EDIT!


#ifndef UR_ROBOT_GAZEBO_MESSAGE_POSEMESSAGESIMPLE_H
#define UR_ROBOT_GAZEBO_MESSAGE_POSEMESSAGESIMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_robot_gazebo
{
template <class ContainerAllocator>
struct PoseMessageSimple_
{
  typedef PoseMessageSimple_<ContainerAllocator> Type;

  PoseMessageSimple_()
    : position()
    , quaternion()  {
    }
  PoseMessageSimple_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , quaternion(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _quaternion_type;
  _quaternion_type quaternion;





  typedef boost::shared_ptr< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> const> ConstPtr;

}; // struct PoseMessageSimple_

typedef ::ur_robot_gazebo::PoseMessageSimple_<std::allocator<void> > PoseMessageSimple;

typedef boost::shared_ptr< ::ur_robot_gazebo::PoseMessageSimple > PoseMessageSimplePtr;
typedef boost::shared_ptr< ::ur_robot_gazebo::PoseMessageSimple const> PoseMessageSimpleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ur_robot_gazebo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ur_robot_gazebo': ['/home/abdollah/catkin_ws/src/skill_transfer/ur_robot_gazebo/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "864b5650ed0d2bfd71f96b23c3666fce";
  }

  static const char* value(const ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x864b5650ed0d2bfdULL;
  static const uint64_t static_value2 = 0x71f96b23c3666fceULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_robot_gazebo/PoseMessageSimple";
  }

  static const char* value(const ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] position\n\
float64[] quaternion\n\
";
  }

  static const char* value(const ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.quaternion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseMessageSimple_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_robot_gazebo::PoseMessageSimple_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "quaternion[]" << std::endl;
    for (size_t i = 0; i < v.quaternion.size(); ++i)
    {
      s << indent << "  quaternion[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quaternion[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_ROBOT_GAZEBO_MESSAGE_POSEMESSAGESIMPLE_H
